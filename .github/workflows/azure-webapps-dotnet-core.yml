name: Portfolio.Dotnet.Identity.Server CI

env:
  # --- Project Paths ---
  SOLUTION_PATH: './src/Portfolio.Dotnet.Identity.sln'
  API_PROJECT_PATH: './src/Portfolio.Dotnet.Identity.Server/Portfolio.Dotnet.Identity.Server.csproj'
  DATA_PROJECT_PATH: './src/Portfolio.Dotnet.Identity.Data/Portfolio.Dotnet.Identity.Data.csproj'
  TEST_PROJECT_PATH: './src/Portfolio.Dotnet.Identity.Server.Tests/Portfolio.Dotnet.Identity.Server.Tests.csproj'

  # --- Azure & Deployment ---
  AZURE_WEBAPP_NAME: 'portfolio-dotnet-identity'
  DATA_CONTEXT_NAME: 'ThisIdentityDbContext'

  # --- Build & Artifact Paths ---
  DOTNET_VERSION: '9.x'
  ARTIFACTS_PATH: '${{ github.workspace }}/artifacts'
  WEBAPP_ARTIFACT_NAME: 'webapp'
  TEST_ARTIFACT_NAME: 'testapp'
  EFBUNDLE_ARTIFACT_NAME: 'efbundle'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'Production'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run .NET Format Check
        run: dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity detailed

      - name: Run NuGet Security Audit
        run: dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
        env:
          ASPNETCORE_ENVIRONMENT: Production
      
      - name: Run tests
        run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --no-build --verbosity normal

      - name: Publish API project
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore --no-build -o ${{ env.ARTIFACTS_PATH }}/${{ env.WEBAPP_ARTIFACT_NAME }}
        env:
          ASPNETCORE_ENVIRONMENT: Production

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WEBAPP_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.WEBAPP_ARTIFACT_NAME }}

      - name: Publish Test project
        run: dotnet publish ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build -o ${{ env.ARTIFACTS_PATH }}/${{ env.TEST_ARTIFACT_NAME }}

      - name: Upload Test artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TEST_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.TEST_ARTIFACT_NAME }}

      - name: Create EF Migration Bundle
        run: | 
            dotnet tool restore
            dotnet ef migrations bundle --project ${{ env.DATA_PROJECT_PATH }} --output ${{ env.ARTIFACTS_PATH }}/${{ env.EFBUNDLE_ARTIFACT_NAME }}/efbundle --context  ${{ env.DATA_CONTEXT_NAME }} --self-contained -r linux-x64 --verbose
      
      - name: Upload EF Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EFBUNDLE_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.EFBUNDLE_ARTIFACT_NAME }}

  deploy:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WEBAPP_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.WEBAPP_ARTIFACT_NAME }}

      - name: Download EF Bundle artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.EFBUNDLE_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.EFBUNDLE_ARTIFACT_NAME }}

      - name: Run EF Migration Bundle
        run: |
            chmod +x ${{ env.ARTIFACTS_PATH }}/${{ env.EFBUNDLE_ARTIFACT_NAME }}/efbundle
            ${{ env.ARTIFACTS_PATH }}/${{ env.EFBUNDLE_ARTIFACT_NAME }}/efbundle --verbose --connection "$DB_CONNECTION_STRING"
        env:
            DB_CONNECTION_STRING: ${{ secrets.DB_SERVER_CONNECTION }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.ARTIFACTS_PATH }}/${{ env.WEBAPP_ARTIFACT_NAME }}

  smoke_test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Download Test artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.TEST_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}/${{ env.TEST_ARTIFACT_NAME }}

      - name: Wait for application startup
        run: |
          for i in $(seq 1 12); do # Try for 1 minute (12 * 5 seconds)
            if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health; then
              echo "Application is up and healthy!"
              exit 0
            fi
            echo "Waiting for application health check..."
            sleep 5
          done
          echo "Application health check timed out."
          exit 1

      - name: Run Smoke Tests
        run: dotnet test ${{ env.ARTIFACTS_PATH }}/${{ env.TEST_ARTIFACT_NAME }}/Portfolio.Dotnet.Api.Tests.dll --filter "TestCategory=Smoke"
        env:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
        if: success()

      - name: Fail Deployment if Smoke Tests Fail
        if: failure()
        run: |
          echo "Smoke tests failed!"
          exit 1